buildscript {
  repositories {
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://repo.spongepowered.org/maven' }
    mavenCentral()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
  }
}
plugins {
  id 'eclipse'
  id 'maven-publish'
  id 'net.minecraftforge.gradle' version '5.1.+'

}


apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

version = '1.0'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modid'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
  embed
  compile.extendsFrom embed
}

sourceSets {
  main {
    java {
      srcDirs "src/main/java"

    }
  }
}


println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
  // The mappings can be changed at any time and must be in the following format.
  // Channel:   Version:
  // official   MCVersion             Official field/method names from Mojang mapping files
  // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
  //
  // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
  // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
  //
  // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
  // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
  //
  // Use non-default mappings at your own risk. They may not always work.
  // Simply re-run your setup task after changing the mappings to update your workspace.
  mappings channel: 'official', version: '1.19.2'

  // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

  // Default run configurations.
  // These can be tweaked, removed, or duplicated as needed.
  runs {
    client {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      // The markers can be added/remove as needed separated by commas.
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      property 'forge.logging.markers', 'REGISTRIES'

      // Recommended logging level for the console
      // You can set various levels here.
      // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
      property 'forge.logging.console.level', 'debug'

      // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
      property 'forge.enabledGameTestNamespaces', 'examplemod'
      args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')


      mods {
        examplemod {
          source sourceSets.main
        }
      }
    }



    data {
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'

      property 'forge.logging.console.level', 'debug'

      // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
      args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

      mods {
        examplemod {
          source sourceSets.main
        }
      }
    }
  }
}
mixin {
  add sourceSets.main, "mysterymod.refmap.json"
}

repositories {
  // Put repositories for dependencies here
  // ForgeGradle automatically adds the Forge maven and Maven Central for you

  // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
  // flatDir {
  //     dir 'libs'
  // }

  maven {
    name = 'sponge'
    url = 'https://repo.spongepowered.org/maven'
  }
  maven {
    name = "mysterymod-repository"
    url = uri("https://nexus.mysterymod.dev/repository/maven-releases/")
    credentials {
      username = project.findProperty("nexus.user") ?: System.getenv("NEXUS_USER")
      password = project.findProperty("nexus.password") ?: System.getenv("NEXUS_PASSWORD")
    }
  }
  maven {
    name = "mysterymod-internal-repository"
    url = uri("https://nexus.mysterymod.dev/repository/mysterymod-internal/")
    credentials {
      username = project.findProperty("nexus.user") ?: System.getenv("NEXUS_USER")
      password = project.findProperty("nexus.password") ?: System.getenv("NEXUS_PASSWORD")
    }
  }
  maven {
    name = "mysterymod-internal-repository"
    url = uri("https://nexus.mysterymod.dev/repository/mysterymod-public/")
    credentials {
      username = project.findProperty("nexus.user") ?: System.getenv("NEXUS_USER")
      password = project.findProperty("nexus.password") ?: System.getenv("NEXUS_PASSWORD")
    }
  }
}

dependencies {
  // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
  // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
  // The userdev artifact is a special name and will get all sorts of transformations applied to it.
  minecraft 'net.minecraftforge:forge:1.19.2-43.1.1'
  annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'



  implementation 'javax.vecmath:vecmath:1.5.2'

  compileOnly 'org.projectlombok:lombok:1.18.22'
  annotationProcessor 'org.projectlombok:lombok:1.18.22'
  implementation project(':mysterymod')
  compileOnly(group: 'com.google.inject', name: 'guice', version: '4.0') {
    exclude module: 'guava'
  }

  embed project(':mysterymod')

  implementation 'com.squareup.okhttp3:okhttp:4.10.0'
  implementation(group: 'com.google.inject', name: 'guice', version: '5.0.1') {
    exclude module: 'guava'
  }
  implementation(group: 'com.google.inject', name: 'guice', version: '5.0.1') {
    exclude module: 'guava'
  }
  implementation 'net.mysterymod.case:caseopening-api:1.0.65'

  // Protocol
  implementation('net.mysterymod.lite:protocol-packets:3.0')
  implementation('net.mysterymod.lite:protocol-client:3.0')
  implementation 'net.mysterymod:web-apiserver-client:1.0.4'
  implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.7.2'
  implementation 'org.json:json:20220320'
  implementation 'com.google.guava:guava:31.0.1-jre'
  implementation 'org.ow2.asm:asm-tree:9.2'
  implementation 'org.ow2.asm:asm-commons:9.2'
  implementation 'org.ow2.asm:asm-util:9.2'
  implementation 'com.google.code.gson:gson:2.2.4'
  //////////// EMBED
  // Hydra & protocol
  implementation('de.datasecs:hydra-client:1.7.3') {
    exclude module: 'netty-all'
  }
  // MysteryMod Services
  implementation 'net.mysterymod.economy:economy-api:1.0.1'
  implementation 'net.mysterymod.case:caseopening-api:1.0.65'
  implementation'net.mysterymod.mapper:okhttp-object-mapper:1.0.5'
  implementation 'net.mysterymod.popup:popup-api:1.0.1'

  // Guice
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
  manifest {

  }


  from {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    configurations.embed.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }

}

project.tasks.named("processResources") {
  duplicatesStrategy = 'exclude'

}


jar.finalizedBy('reobfJar')

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar
    }
  }
  repositories {
    maven {
      url "file://${project.projectDir}/mcmodsrepo"
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
